SELECT:
  In postgresql SELECT statement is used to fetch the data from a database table,which returns the data in the form of result table. These result tables are called result sets.
  
Syntax:
  SELECT column1,column2,....columnN FROM table_name;
  
  If we want to fetch all the fields available in the database table we can use the following syntax:
    SELECT * FROM table_name;
    
Example:
  SELECT id,student_name,student_usn FROM student;
                  OR
  SELECT * FROM student
  
By using SELECT we can perform several functions:

1.WHERE:
    The WHERE clause uses the condition to filter the rows returned from the SELECT clause.
 
 Syntax:
    SELECT column1,column2,....columnN FROM table_name WHERE CONDITION value;
    CONDITION: =, >, <, >=, <=, !=, AND, OR, IN, BETWEEN, LIKE, IS NULL, NOT.
    
 Example:
    SELECT id,student_name FROM student WHERE student_name IN ('ni','a','ha');
    
 2.GROUP BY:
    The group by clause divides the rows returned from the SELECT statement into groups. For each group you can apply an aggregate function.
    For example sum() to calculete sum of items.
    count() to get the number of items.
    
    Syntax:
      SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,.......;
      
    Example:
      SELECT employee_id, sum(salary) FROM employee GROUP BY employee_id;
    
  3.HAVING:
      The having clause specifies a search coondition for a group or an aggregate. The HAVING clause is often used with the GROUP BY clause to filter groups or aggregates 
      based on a specified condition.
      
      Syntax:
        SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition;
        
      Example:
        SELECT employee_id, sum(salary) FROM employee GROUP BY employee_id HAVING (salary>10000);
        
    4.ORDER BY:
        When you query data from a table, the SELECT statement returns rows in an unspecified order. To sort the rows of the result set, you use the ORDER BY clause
        in the SELECT statement.The ORDER BY clause allows you to sort rows returned by a SELECT clause in ascending or descending order based on a sort expression.
        
        Syntax:
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY sort_expression[asc| desc];
          
        Example:
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY id ASC;
          
     5.LIMIT:
        The PostgreSQL LIMIT clause is used to limit the data amount returned by the SELECT statement.
        
        Syntax:
          SELECT column1, column2, columnN FROM table_name LIMIT [no of rows];    OR
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY sort_expression[asc| desc] 
          LIMIT[no of rows];
          
        Example:
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY id ASC LIMIT 4;
          
     6.OFFSET:
        OFFSET says to skip that many rows before beginning to return rows. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, 
        then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
        
        Syntax:
          SELECT column1, column2, columnN FROM table_name LIMIT [no of rows] OFFSET [no of rows]  OR
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY sort_expression[asc| desc] 
          LIMIT[number of rows] OFFSET [no of rows];
          
        Example:
          SELECT column1, column2,.... aggregate function(column3), FROM table_name GROUP BY column1,column2,..... HAVING condition ORDER BY id ASC LIMIT 4 OFFSET 2;
          
          
          
   
      
     
    
    
  
    
 
  
